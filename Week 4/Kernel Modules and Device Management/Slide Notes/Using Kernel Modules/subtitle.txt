Let's get some practice getting information about loading and unloading kernel modules on an Ubuntu 17.04 system. Now, this system is running the stock kernel that came from Ubuntu. If I do "uname -r", I can see what it is, 4.10.0-20, and I have navigated in advance to the directory /lib/modules/4.10.0-20-generic/kernel/drivers/net/ethernet/3com, where some of the Ethernet drivers appear on the system. So, they make it easier for me to do this without having to type at all. In this directory, there's a well-known, but not used very much anymore, 3c59x network card, and if I do "modinfo 3c59x", that gives me information about that module. You'll see it's one of the original ones, written by Donald Becker in the early days of Linux. It gives you information about what it is, its actual version number, the source version number, its license, the alias lines tell you what hardware it works on. This is an important line "depends: mii". That means the media interface extensions module has to be loaded first, the mii. vergmagic tells you the main parameters with which the kernel was loaded. This kernel module was compiled, I mean, so it tells you the version of the kernel, it was a multiprocessor, and that it was a kernel that permits kernel module unloading, and then there's information about parameters that can be supplied to the module when it's loaded on the system. If I want to see what's actually loaded on the system now in terms of kernel modules, I can just type "lsmod" and it's quite a bit, so I'll put it into "less", and you see here's the module names and their size. Under used by, the first field here, is the number of processes that are using the kernel module. So, for instance, this one in particular, there's two different processes on the system that are currently using it. The second field here is other modules which are using the module. So, for instance, the stp module is being used by the bridge module. So, I can't remove the stp module unless I remove bridge as well, because otherwise, the system will have a severe problem. So, let's see what happens if I try to load directly 3c59x by doing "sudo insmod 3c59x.ko". And it tells me "Unknown symbol in module". That's because the mii interface module is not currently loaded. If however, I use the modprobe utility which, is smart enough to go get anything else that this network driver needs, so I do "modprobe 3c59x", and of course, I have to do "sudo" on that, it worked just fine. If I do "lsmod" and just look at the first few, you'll see it loaded not just 3c59x, but mii. Now, we're actually not going to use this driver, network card driver, so I might as well remove it, so I can do that with "sudo modprobe -r 3c59x". No complaints. And if I do "lsmod", you'll see now they're both gone. If I were to type "dmesg" and just look at the last bunch of lines, so "dmesg tail", let's say "30", I get the less 30 lines, but I forgot the dash there [dmesg | tail -30]. Okay. You'll see exactly what went on here, it said "Unknown symbol mii_ethtool", etc. So, it's telling me that it couldn't load it because I didn't load the other module first. So, that's a quick primer into main commands for dealing with modules, which are insmod or mmod, modprobe, lsmod and modinfo.